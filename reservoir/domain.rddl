domain reservoir_control {

    types {
        reservoir: object;
    };

    pvariables {
        TOP_RES(reservoir): {non-fluent, real, default = 100.0};
        MAX_LEVEL(reservoir): {non-fluent, real, default = 80.0};
        MIN_LEVEL(reservoir): {non-fluent, real, default = 20.0};
        RAIN_VAR(reservoir): {non-fluent, real, default = 5.0};
        LOW_COST(reservoir) : {non-fluent, real, default = -5.0};
        HIGH_COST(reservoir): {non-fluent, real, default = -10.0};
        OVERFLOW_COST(reservoir): {non-fluent, real, default = -15.0};
        RES_CONNECT(reservoir, reservoir): {non-fluent, bool, default = false};
        CONNECTED_TO_SEA(reservoir): {non-fluent, bool, default = false};

        rain(reservoir): {interm-fluent, real};
        overflow(reservoir) : {interm-fluent, real};
        inflow(reservoir): {interm-fluent, real};
        individual_outflow(reservoir): {interm-fluent, real};
        released_water(reservoir): {interm-fluent, real};

        rlevel(reservoir): {state-fluent, real, default = 50.0};

        release(reservoir): {action-fluent, real, default = 0.0};
    };

    cpfs {
        rain(?r) = abs[Normal(0, RAIN_VAR(?r))];
        released_water(?r) = max[0, min[rlevel(?r), release(?r)]];
        overflow(?r) = max[0, rlevel(?r) - released_water(?r) - TOP_RES(?r)];
        individual_outflow(?r) = released_water(?r) / ((sum_{?out: reservoir} [RES_CONNECT(?r,?out)]) + CONNECTED_TO_SEA(?r));
        inflow(?r) = (sum_{?in : reservoir} [RES_CONNECT(?in,?r) * individual_outflow(?in)]);
        rlevel'(?r) = min[TOP_RES(?r), max[0, rlevel(?r) + inflow(?r) + rain(?r) - overflow(?r) - released_water(?r)]];
    };

    reward = (sum_{?r: reservoir}[if ((rlevel'(?r) >= MIN_LEVEL(?r)) ^ (rlevel'(?r) <= MAX_LEVEL(?r))) then 0
        else if (rlevel'(?r) <= MIN_LEVEL(?r)) then LOW_COST(?r) * (MIN_LEVEL(?r) - rlevel'(?r))
        else if ((rlevel'(?r) > MAX_LEVEL(?r)) ^ (rlevel'(?r) <= TOP_RES(?r))) then HIGH_COST(?r) * (rlevel'(?r) - MAX_LEVEL(?r))
        else HIGH_COST(?r) * (rlevel'(?r) - MAX_LEVEL(?r)) + OVERFLOW_COST(?r) * overflow(?r)
    ]);

    action-preconditions {
        forall_{?r : reservoir} [release(?r) <= TOP_RES(?r)];
        forall_{?r : reservoir} [release(?r) >= 0];
    };

    state-invariants {
        forall_{?r : reservoir}[rlevel(?r) >= 0];
        forall_{?r : reservoir}[rlevel(?r) <= TOP_RES(?r)];
        (sum_{?r : reservoir} [CONNECTED_TO_SEA(?r)]) >= 1;
    };
}